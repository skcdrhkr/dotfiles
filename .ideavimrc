" Setup Intellij VIM
" Install below plugins:
" 1. IdeaVim
" 2. IdeaVim-EasyMotion
" 3. AceJump
" 4. IdeaVim-Quickscope
" 5. Fuzzier
" 6. Which-Key

"" Base Settings
"" ========================================================

set scrolloff=10
set number
set relativenumber
set showmode
set showcmd

set ignorecase 
set smartcase
set incsearch
set hlsearch

set noerrorbells
set novisualbell

" Use system clipboard
set clipboard=unnamedplus,ideaput

let mapleader = " "


"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
set sneak
set nerdtree
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'

" Easymotion and Quickscope settings
set easymotion
set notimeout
set quickscope

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_file_explorer = "<leader>x Open file explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<C-p> Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>/ Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<C-o> Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"
let g:WhichKeyDesc_file_nav_create_scratch = "<leader>fs Create new scratch file"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "g Go to X"
let g:WhichKeyDesc_goto_declaration = "gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "gu Go to Usages"
let g:WhichKeyDesc_goto_test = "gt Go to Test"
let g:WhichKeyDesc_goto_back = "gb Go Back"
let g:WhichKeyDesc_goto_forward = "gf Go Forward"
let g:WhichKeyDesc_goto_git_status = "<leader>Gs Open Git status dialog"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_show_desc = "<leader>ed Show Error Description"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhichKeyDesc_generate = "<leader>i Generate"

let g:WhichKeyDesc_terminal = "<leader>t Terminal"

let g:WhichKeyDesc_project = "<leader>p Project tools"
let g:WhichKeyDesc_project_fuzzy_files = "<leader>pf Fuzzy file search"

let g:WhichKeyDesc_move = "<leader>m Move tools"
let g:WhichKeyDesc_move_fuzzy = "<leader>mf Fuzzy file mover"
let g:WhichKeyDesc_file_nav_fuzzy_grep = "<leader>fg Fuzzy grep search"

"" Key mappings
"" ========================================================

inoremap jj <Esc>

" Add new line
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" Popup navigation
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" Running and Debugging
nnoremap ,r :action ContextRun<CR>
nnoremap ,c :action RunClass<CR>
nnoremap ,f :action ChooseRunConfiguration<CR>
nnoremap ,t :action ActivateRunToolWindow<CR>
nnoremap ,u :action Rerun<CR>

" Remove search highlight
nnoremap <Esc> :nohlsearch<CR>

"" Leader commands
"" ========================================================

" Comment lines
map <leader>c <action>(CommentByLineComment)

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>

" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Window splits 
map <leader>wv :action SplitVertically<CR>
map <leader>wh :action SplitHorizontally<CR>
map <leader>wu :action Unsplit<CR>
map <leader>wm :action MoveEditorToOppositeTabGroup<CR>

" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)

" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

" File navigation
map <C-p> <action>(GotoFile)
map <C-o> <action>(RecentFiles)
map <leader>/ <action>(FindInPath)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Close active tab
map <leader>q <action>(CloseContent)

" Refactoring
map <leader>rn :action RenameElement<CR>
map <leader>rm :action ExtractMethod<CR>
map <leader>rv :action IntroduceVariable<CR>
map <leader>rf :action IntroduceField<CR>
map <leader>rs :action ChangeSignature<CR>
map <leader>rr :action Refactorings.QuickListPopupAction<CR>

" Go to code
nmap gd :action GotoDeclaration<CR>
nmap gy :action GotoTypeDeclaration<CR>
nmap gi :action GotoImplementation<CR>
nmap gu :action ShowUsages<CR>
nmap gt :action GotoTest<CR>
nmap gb :action Back<CR>
nmap gf :action Forward<CR>

" Git windows
map <leader>Gs :action ActivateVersionControlToolWindow<CR>

" Errors
map <leader>en :action ReSharperGotoNextErrorInSolution<CR>
map <leader>ep :action ReSharperGotoPrevErrorInSolution<CR>
map <leader>ed :action ShowErrorDescription<CR>

" Generate
nmap <leader>i :action Generate<CR>

" Terminal
nnoremap <c-t> :action Terminal.OpenInTerminal<CR>
nnoremap <leader>t :action ActivateTerminalToolWindow<CR>

" Fuzzy Search, plugin: Fuzzier
map <leader>pf <action>(com.mituuz.fuzzier.Fuzzier)
map <leader>mf <action>(com.mituuz.fuzzier.FuzzyMover)
map <leader>fg <action>(com.mituuz.fuzzier.FuzzyGrep)
